{"version":3,"sources":["App.js","index.js"],"names":["getEthereumObject","window","ethereum","findMetaMaskAccount","a","console","error","log","request","method","accounts","length","account","App","useState","currentAccount","setCurrentAccount","allWaves","waveMessage","setWaveMessage","contractABI","abi","wave","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","toNumber","waveTxn","hash","wait","connectWallet","alert","useEffect","className","onSubmit","type","placeholder","value","onChange","event","target","onClick","map","index","key","style","backgroundColor","marginTop","padding","address","timestamp","toString","message","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b0b9f48.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport abi from \"./utils/WavePortal.json\";\n\nconst getEthereumObject = () => window.ethereum;\n\nconst findMetaMaskAccount = async () => {\n    try {\n        const ethereum = getEthereumObject();\n        if (!ethereum) {\n            console.error(\"Make sure you have Metamask!\");\n            return null;\n        }\n\n        console.log(\"We have the Ethereum object\", ethereum);\n        const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n        if (accounts.length !== 0) {\n            const account = accounts[0];\n            console.log(\"Found an authorized account:\", account);\n            return account;\n        } else {\n            console.error(\"No authorized account found\");\n            return null;\n        }\n    } catch (error) {\n        console.error(error);\n        return null;\n    }\n};\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n  const [waveMessage, setWaveMessage] = useState(\"\");\n\n  const contractAddress = \"0xc3904bd196A1d602Cd477f169087da9310f6DF5F\";\n  const contractABI = abi.abi;\n\n  const getAllWaves = async () => {\n      try {\n          const { ethereum } = window;\n          if (ethereum) {\n              const provider = new ethers.providers.Web3Provider(ethereum);\n              const signer = provider.getSigner();\n              const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n              const waves = await wavePortalContract.getAllWaves();\n\n              let wavesCleaned = [];\n              waves.forEact(wave => {\n                  wavesCleaned.push({\n                      address: wave.waver,\n                      timestamp: new Date(wave.timestamp * 1000),\n                      message: wave.message\n                  });\n              });\n\n              setAllWaves(wavesCleaned);\n          } else {\n              console.log(\"Ethereum object doesn't exist!\")\n          }\n      } catch (error) {\n          console.log(error);\n      }\n  }\n\n  const wave = async () => {\n    try {\n        const { ethereum } = window;\n\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n            let count = await wavePortalContract.getTotalWaves();\n            console.log(\"Retreived total wave count...\", count.toNumber());\n\n            const waveTxn = await wavePortalContract.wave(\"test\");\n            setWaveMessage(\"\");\n            console.log(\"Mining...\", waveTxn.hash);\n\n            await waveTxn.wait();\n            console.log(\"Mined -- \", waveTxn.hash);\n\n            count = await wavePortalContract.getTotalWaves();\n            console.log(\"Retreived total wave count...\", count.toNumber());\n        } else {\n            console.log(\"Ethereum object doesn't exist!\");\n        }\n    } catch (error) {\n        console.log(error);\n    }\n  }\n\n    const connectWallet = async () => {\n        try {\n            const ethereum = getEthereumObject();\n            if (!ethereum) {\n                alert(\"Get MetaMask!\");\n                return;\n            }\n\n            const accounts = await ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n\n            console.log(\"Connected\", accounts[0]);\n            setCurrentAccount(accounts[0]);\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    useEffect(async () => {\n        const account = await findMetaMaskAccount();\n        if (account !== null) {\n            setCurrentAccount(account);\n        }\n    }, []);\n\n    const updateMessage = (event) => {\n        setWaveMessage(event.target.value);\n    }\n\n  return (\n    <div className=\"mainContainer\">\n\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        ðŸ‘‹ Hello there!\n        </div>\n\n        <div className=\"bio\">\n        I am Charles so that's pretty cool right? Connect your Ethereum wallet and wave at me!\n        </div>\n\n\n      {/*        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button> */}\n      <form onSubmit={wave} >\n        <center>\n        <button className=\"waveButton\">\n          Wave at Me\n        </button>\n        <div className=\"waveText\">\n            <input type=\"text\" placeholder=\"Your message here...\" value={waveMessage} onChange={updateMessage}></input>\n        </div>\n        </center>\n      </form>\n\n\n        {!currentAccount && (\n            <button className=\"waveButton\" onClick={connectWallet}>\n                Connect Wallet\n            </button>\n        )}\n      <form >\n      </form>\n      {allWaves.map((wave, index) => {\n          return (\n              <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n              </div>)\n      })}\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}